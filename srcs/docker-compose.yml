
networks:
  nginx-wordpress:
    driver: bridge
  wordpress-mariadb:
    driver: bridge
  wordpress-redis:
    driver: bridge
  wordpress-ftp:
    driver: bridge
  adminer-mariadb:
    driver: bridge

volumes:
  Wordpress: 
    name: "Wordpress"
    driver: local
    driver_opts:
      type: local
      device: ${WP_VOLUME_SRC}
      o: bind
  DB: 
    name: "DB"
    driver: local
    driver_opts:
      type: local
      device: ${DB_VOLUME_SRC}
      o: bind
  Website:
    name: "Website"
    driver: local
    driver_opts:
      type: local
      device: ${WEBSITE_VOLUME_SRC}
      o: bind

secrets:
  db_password:
    file: ${DB_PWD_FILE}
  db_root_password:
    file: ${DB_ROOT_PWD_FILE}
  credentials:
    file: ${CREDENTIALS_FILE}

services:
  mariadb:
    build: 
      context: ./requirements/mariadb
      dockerfile: Dockerfile
    secrets:
      - source : db_password
        target : ${DB_PWD_FILE_TARGET}
      - source : db_root_password
        target : ${DB_ROOT_PWD_FILE_TARGET}
    networks:
      - wordpress-mariadb
      - adminer-mariadb
    volumes:
      - type: volume
        source: DB
        target: /var/lib/mysql
    environment:
      - DB_NAME=${DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - DB_PWD_FILE_TARGET=${DB_PWD_FILE_TARGET}
      - DB_ROOT_PWD_FILE_TARGET=${DB_ROOT_PWD_FILE_TARGET}
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -p$(cat $DB_ROOT_PWD_FILE_TARGET) || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
    image: mariadb:${IMAGE_TAG}
    container_name: mariadb-${CONTAINER_NAME}
    init: true
    restart: on-failure
  wordpress:
    depends_on:
        mariadb:
          condition: service_healthy
          restart: true
    build:
      context: ./requirements/wordpress/
      dockerfile: Dockerfile
      args:
        - WP_FILES_DIR=${WP_FILES_DIR}
        - PHP_VERSION=${PHP_VERSION}
        - WP_CLI_URL=${WP_CLI_URL}
    secrets:
      - source: db_password
        target: ${DB_PWD_FILE_TARGET}
      - source: credentials
        target: ${WP_CREDENTIALS_FILE_TARGET}
    networks:
      - nginx-wordpress
      - wordpress-mariadb
      - wordpress-redis
    volumes:
      - type: volume
        source: Wordpress
        target: ${WP_FILES_DIR}
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - DB_PWD_FILE_TARGET=${DB_PWD_FILE_TARGET}
      - WP_CREDENTIALS_FILE_TARGET=${WP_CREDENTIALS_FILE_TARGET}
      - DOMAIN=${DOMAIN}
      - WP_TITLE=${WP_TITLE}
      - CONTAINER_NAME=${CONTAINER_NAME}
      - REDIS_PORT=${REDIS_PORT}
      - WP_FILES_DIR=${WP_FILES_DIR}
      - PHP_VERSION=${PHP_VERSION}
      - WP_PORT=${WP_PORT}
    healthcheck:
      test: ["CMD-SHELL", "cgi-fcgi -bind -connect localhost:$WP_PORT || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 5
    image: wordpress:${IMAGE_TAG}
    container_name: wordpress-${CONTAINER_NAME}
    restart: on-failure
    init: true

  nginx:
    depends_on:
      wordpress:
        condition: service_healthy
        restart: true
    build: 
      context: ./requirements/nginx/
      dockerfile: Dockerfile
      args:
        - NGINX_PORT=${NGINX_PORT}
    ports:
      - "127.0.0.1:${NGINX_PORT}:${NGINX_PORT}"
    networks:
      - nginx-wordpress
    volumes:
      - type: volume
        source: Wordpress
        target: ${WP_FILES_DIR}
      - type: volume
        source: Website
        target: /var/www/html/$WEBSITE_NAME
      - ${NGINX_CERT_FILE}:${NGINX_CERT_FILE}:ro
      - ${NGINX_KEY_FILE}:${NGINX_KEY_FILE}:ro
    environment:
      - DOMAIN=${DOMAIN}
      - NGINX_CERT_FILE=${NGINX_CERT_FILE}
      - NGINX_KEY_FILE=${NGINX_KEY_FILE}
      - WP_FILES_DIR=${WP_FILES_DIR}
      - CONTAINER_NAME=${CONTAINER_NAME}
      - WP_HOST=${WP_HOST}
      - WEBSITE_NAME=${WEBSITE_NAME}
      - ADMINER_PORT=${ADMINER_PORT}
    image : nginx:${IMAGE_TAG}
    container_name : nginx-${CONTAINER_NAME}
    restart: on-failure
    init: true

  redis:
    depends_on:
      wordpress:
        condition: service_healthy
        restart: true
    build:
      context: ./requirements/bonus/redis
      dockerfile: Dockerfile
      args:
        - REDIS_PORT=${REDIS_PORT}
    networks:
      - wordpress-redis
    image: redis:${IMAGE_TAG}
    container_name: redis-${CONTAINER_NAME}
    restart: on-failure
    init: true

  ftp:
    build:
      context: ./requirements/bonus/ftp
      dockerfile: Dockerfile
      args:
        - FTP_USER=${FTP_USER}
        - FTP_USER_HOME_DIR=${FTP_USER_HOME_DIR}
        - FTP_FILES_DIR=${FTP_FILES_DIR}
        - FTP_PORT=${FTP_PORT}
    volumes:
      - type: volume
        source: Wordpress
        target: ${FTP_FILES_DIR}
    secrets:
      - source: credentials
        target: ${FTP_SECRETS_FILE_TARGET}
    ports:
      - "127.0.0.1:${FTP_PORT}:${FTP_PORT}"
    environment:
      - FTP_SECRETS_FILE_TARGET=${FTP_SECRETS_FILE_TARGET}
    image: ftp:${IMAGE_TAG}
    container_name: ftp-${CONTAINER_NAME}
    restart: on-failure
    init: true

  adminer:
    depends_on:
      mariadb:
        condition: service_healthy
    build:
      context: ./requirements/bonus/adminer
      dockerfile: Dockerfile
      args:
        - ADMINER_PORT=${ADMINER_PORT}
    networks:
      - adminer-mariadb
    environment:
      - ADMINER_PORT=${ADMINER_PORT}
    ports:
      - "127.0.0.1:619:${ADMINER_PORT}"
    image: adminer:${IMAGE_TAG}
    container_name: adminer-${CONTAINER_NAME}
    restart: on-failure
    init: true